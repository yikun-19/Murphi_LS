
===========================================================================
Caching Murphi Release 5.5.0
Finite-state Concurrent System Compiler.

Caching Murphi Release 5.5.0 is based on Murphi release 3.1.
Caching Murphi Release 5.5.0 :
Copyright (C) 2009 - 2012 by Sapienza University of Rome.
Murphi Release 3.1 :
Copyright (C) 1992 - 1999 by the Board of Trustees of
Leland Stanford Junior University.
===========================================================================
Call with the -l flag or read the license file for terms
and conditions of use.
Run this program with "-h" for the list of options.
Bugs, questions, and comments should be directed to
"melatti@di.uniroma1.it".

CMurphi compiler last compiled date: Nov  3 2022
===========================================================================
Release
Release
Acquire
Acquire
LNCW
LNCW
LNCW
LNCW
LNCW
LCW
LCW
LCW
LCW
LCW
LNCNFRD
LNCNFRD
LNCNFRR
LNCNFRR
LNCNFRR
LNCNFRR
LNCNFRR
LNCNFRR
LNCFRD
LNCFRD
LNCFRAD
LNCFRRA
LNCFRRA
LNCFRRA
LNCFRRA
LNCFRRA
LNCFRRA
LCFRD
LCFRD
LCFRAD
LCFRRA
LCFRRA
LCFRRA
LCFRRA
LCFRRA
LCFRRA
NLNCWD
NLNCWD
NLNCWR
NLNCWR
NLNCWR
NLNCWR
NLNCWR
NLCW
NLCW
NLCW
NLCW
NLCW
NLNCRD
NLNCRD
NLNCRR
NLNCRR
NLNCRR
NLNCRR
NLNCRR
RepAllDone
RepAllDone
RepAll
RepAll
RepAll
RepAll
Replace
Replace
Replace
DCD
DCD
DCND
DCND
CRC
RNI
RNI
CRIC
CRIC
RI
RI

-------begin: declare part!-------
  mu_replace is declared as enum type
  nodeppp0mu_i0qqq.mu_hasLock is declared as bool type
  nodeppp0mu_i0qqq.mu_firstReadppp0mu_a0qqq is declared as bool type
  mu_nodeppp0mu_i0qqq.mu_cacheppp0mu_j0qqq.mu_state is declared as enum type
  mu_nodeppp0mu_i0qqq.mu_cacheppp0mu_j0qqq.mu_addr is declared as int type
  mu_a is declared as int type
  mu_nodeppp0mu_i0qqq.mu_cacheppp0mu_j0qqq.mu_data is declared as int type
  mu_memoryppp0mu_a0qqq.mu_data is declared as int type
-------end: declare part!---------

invariant in string format: 
  (assert (=> (and (and (and (and (= mu_replace mu_NON) mu_nodeppp0mu_i0qqq.mu_hasLock) (not mu_nodeppp0mu_i0qqq.mu_firstReadppp0mu_a0qqq)) (= mu_nodeppp0mu_i0qqq.mu_cacheppp0mu_j0qqq.mu_state mu_VALID)) (= mu_nodeppp0mu_i0qqq.mu_cacheppp0mu_j0qqq.mu_addr mu_a)) (not (= mu_nodeppp0mu_i0qqq.mu_cacheppp0mu_j0qqq.mu_data mu_memoryppp0mu_a0qqq.mu_data))))

--transfering input string to Z3 format... 
--transfer successfully! 

Z3 give a goal state successfully!

Code generated in file ./benchmarks/murphi_protocols/n_godsont.cpp
